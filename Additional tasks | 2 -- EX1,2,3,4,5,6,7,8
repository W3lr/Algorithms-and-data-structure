              Задача 5. Да се напише функция, която в множеството точки с координати x[i], y[i], разположени в една плоскост, да се намира двете най-близки.

#include <iostream>
#include <cmath>
#include <climits>

using namespace std;

struct Point {
    int x, y;
};

// Function to calculate distance between two points
double dist(Point p1, Point p2) {
    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));
}

// Function to find the two closest points in a set of points
void findClosestPoints(Point points[], int n) {
    double minDist = INT_MAX;
    Point p1, p2;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            double d = dist(points[i], points[j]);

            if (d < minDist) {
                minDist = d;
                p1 = points[i];
                p2 = points[j];
            }
        }
    }

    cout << "The two closest points are (" << p1.x << ", " << p1.y << ") and (" << p2.x << ", " << p2.y << ")" << endl;
    cout << "Their distance is " << minDist << endl;
}

int main() {
    // Example usage
    Point points[] = {{1, 1}, {2, 3}, {4, 2}, {5, 6}};
    int n = sizeof(points) / sizeof(points[0]);
    findClosestPoints(points, n);

    return 0;
}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------#

         Задача 6. Да се състави функция, която за дадено естествено число n>13 намира всички двойки прости числа по-малки от n, разликата между които е равна на 4.

#include <iostream>
#include <cmath>

using namespace std;

bool is_prime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}


void prime_pairs(int n) {
    for (int i = 2; i <= n-4; i++) {
        if (is_prime(i) && is_prime(i+4)) {
            cout << i << " " << i+4 << endl;
        }
    }
}

int main() {
    int n;
    cout << "Enter a natural number greater than 13: ";
    cin >> n;
      if (n<=13){
       cout << "You have entered number = or < 13. Try again";
       return 0;
       }
    prime_pairs(n);
    return 0;
}
                          
                                        
                                        
                                        
                                      
                                    Задача 7. Да се напише програма, определяща колко пъти през XXI век 1 януари се пада в понеделник.
                                        
#include <iostream>

using namespace std;

int count_mondays(int year, int count) {
    if(year == 2101) {
        return count;
    }

    int day = (((year - 1) * 365) + ((year - 1) / 4) - ((year - 1) / 100) + ((year) / 400) + 1) % 7;
    if(day == 1) {
        count++;
    }

    return count_mondays(year + 1, count);
}

int main() {
    int count = count_mondays(2001, 0);

    cout << "Брой на годините, в които 1-ви януари е понеделник: " << count << endl;

    return 0;
}
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

